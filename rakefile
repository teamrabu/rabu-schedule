# Copyright (C) 2011 Titanium I.T. LLC. All rights reserved. See LICENSE.txt for details.

require 'socket'
require 'timeout'
require "rake/testtask"

SRC_DIR = "src"
LIB_DIR = "lib"
BUILD_DIR = "build"
OUTPUT_DIR = "generated"
BIN_DIR = "#{BUILD_DIR}/vendor"
MERGED_DIR = "#{OUTPUT_DIR}/built"
RESULTS_DIR = "#{OUTPUT_DIR}/run_results" 

RHINO_JAR = "#{BIN_DIR}/rhino.jar"
JSLINTRUNNER_JS = "#{BUILD_DIR}/jslintrunner.js"

PID_DIR = "#{OUTPUT_DIR}/pid"
JSTESTDRIVER_JAR = "#{BIN_DIR}/JsTestDriver-1.3.1.jar"
JSTESTDRIVER_PORT = 4224
JSTESTDRIVER_PID_FILE = "#{PID_DIR}/jstestdriver.pid"
JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC = 10
JSTESTDRIVER_BROWSER_TIMEOUT_IN_SEC = 10

HTML_SRC_DIR = "#{SRC_DIR}/html"
JS_SRC_DIR = "#{SRC_DIR}/javascript"
MAIN_HTML_SOURCE = "#{HTML_SRC_DIR}/projection.html"
MERGED_HTML = "#{MERGED_DIR}/projection.html"
MAIN_JS_SOURCE = "#{JS_SRC_DIR}/main.js"
MERGED_JS = "#{MERGED_DIR}/schedule.js"
MERGE_REGEX = /<%=\s*rabu_library\s*%>/

RUBY_SRC_DIR = "#{SRC_DIR}/ruby"
MERGED_RUBY = "#{MERGED_DIR}/rabu-sched.rb"
MAIN_RUBY_SOURCE = "#{RUBY_SRC_DIR}/cli.rb"

TEST_CONFIG = "#{HTML_SRC_DIR}/_html_test.rabu"
TEST_OUTPUT = "#{RESULTS_DIR}/projection.html"

PROJECTION_DIR = "#{OUTPUT_DIR}/projection"
PROJECTION_CONFIG = "estimates.rabu"
PROJECTION_HTML = "#{PROJECTION_DIR}/projection.html"

RELEASE_DIR = "released"

directory PID_DIR
directory MERGED_DIR
directory RESULTS_DIR
directory PROJECTION_DIR
directory RELEASE_DIR

desc "Erase all generated files"
task :clean => [:shutdown] do       # must shut down because the pid file is in output directory
    explain "Cleaning build" do
        rm_rf OUTPUT_DIR
    end
end

##### Tests

desc "Check everything"
task :default => [:check_all]
task :check_all => [:ruby, :javascript, :html]

desc "Check Javascript"
task :javascript => [:js_test, :js_lint]

desc "Check HTML"
task :html => [:html_test]

desc "Update projection"
task :projection => [PROJECTION_HTML]

# desc "Javascript unit tests"
task :js_test => [:startup] do
    explain "Running Javascript unit tests" do
        JsTestDriver::run_tests
    end
end

# desc "Javascript lint"
task :js_lint do
	explain "Running lint" do
		# NOTE: Because I haven't figured out how to pass command-line arguments
		# to Rhino scripts, jslintrunner must be configured by editing source file.
		run "java -jar #{RHINO_JAR} #{JSLINTRUNNER_JS}"
		raise "Lint failed" if $? != 0
	end
end

# desc "HTML unit tests"
task :html_test => [TEST_OUTPUT] do
    require "#{HTML_SRC_DIR}/_html_test"
    explain "Running HTML unit tests" do
        test_html(TEST_OUTPUT)
    end
end

desc "Check Ruby"
task :ruby do
	explain("Running Ruby unit tests"){}
end
Rake::TestTask.new(:ruby) do |test|
	test.libs << RUBY_SRC_DIR
	test.pattern = "#{RUBY_SRC_DIR}/_*test.rb"
end

##### Builds

task MERGED_JS => [MAIN_JS_SOURCE, MERGED_DIR] do
	explain "Merging Javascript" do
		rm_f MERGED_JS
		puts "Concatenating #{MERGED_JS}"
		File.open(MERGED_JS, "w") do |dest_file|
			files = FileList.new(
				"#{LIB_DIR}/jquery.v1.5.1.js",
				"#{LIB_DIR}/jqueryui-1.8.11/jquery.ui.core.js",
				"#{LIB_DIR}/jqueryui-1.8.11/jquery.ui.widget.js",
				"#{LIB_DIR}/jqueryui-1.8.11/jquery.ui.mouse.js",
				"#{LIB_DIR}/jqueryui-1.8.11/jquery.ui.draggable.js",
				"#{LIB_DIR}/*.js",
				MAIN_JS_SOURCE,
				"#{JS_SRC_DIR}/*.js"
			)
			files.exclude "#{JS_SRC_DIR}/_*test.js"
			files.uniq.each do |src_file|
				append(src_file, dest_file)
			end
		end
	end
end

task MERGED_HTML => [MAIN_HTML_SOURCE, MERGED_JS, MERGED_DIR] do
	explain "Merging HTML" do
		rm_f MERGED_HTML
		puts "Concatenating #{MERGED_HTML}"
		merged_library = false;
		File.open(MERGED_HTML, "w") do |dest_file|
			puts "  #{MAIN_HTML_SOURCE}"
			IO.readlines(MAIN_HTML_SOURCE).each do |line|
				if MERGE_REGEX.match line then
					append(MERGED_JS, dest_file)
					merged_library = true
				else
					dest_file.write line
				end
			end
		end
		raise "Merge regex (#{MERGE_REGEX.inspect}) not found in #{MAIN_HTML_SOURCE}" unless merged_library
	end
end

task MERGED_RUBY => [MAIN_RUBY_SOURCE, MERGED_HTML, MERGED_DIR] do
	explain "Merging Ruby script" do
		rm_f MERGED_RUBY
		puts "Concatenating #{MERGED_RUBY}"
		File.open(MERGED_RUBY, "w") do |dest_file|
			IO.readlines(MAIN_RUBY_SOURCE).each do |line|
				if line =~ /^require \"(.+)\"/ then
					append("#{RUBY_SRC_DIR}/#{$1}.rb", dest_file)
				else
					dest_file.write line
				end
			end
			puts "  #{MAIN_RUBY_SOURCE}"
			append(MERGED_HTML, dest_file)
		end
	end
end

task TEST_OUTPUT => [MERGED_RUBY, RESULTS_DIR] do
	explain "Creating Rabu output file" do
		run "ruby #{MERGED_RUBY} < #{TEST_CONFIG} > #{TEST_OUTPUT}"
		raise "Run failed" if $? != 0
	end
end

task PROJECTION_HTML => [MERGED_RUBY, PROJECTION_DIR] do
	explain "Updating release projection" do
		run "ruby #{MERGED_RUBY} < #{PROJECTION_CONFIG} > #{PROJECTION_HTML}"
		raise "Run failed" if $? != 0
	end
end

desc "Create tested release package"
task :release => [:check_all, MERGED_RUBY, RELEASE_DIR] do
	explain "Building release" do
		cp MERGED_RUBY, RELEASE_DIR
		cp PROJECTION_CONFIG, RELEASE_DIR
	end
end

##### JsTestDriver

desc "Start JsTestDriver"
task :startup => [PID_DIR] do
    next if JsTestDriver::is_running?
    explain "Starting JsTestDriver (use 'rake shutdown' to stop)" do
        JsTestDriver::launch
    end
end

desc "Shut down JsTestDriver"
task :shutdown do
    next unless JsTestDriver::is_running?
    explain "Shutting down JsTestDriver server (close the JsTestDriver browser manually)" do
        JsTestDriver::terminate
    end
end

desc "Reset JsTestDriver"
task :reset => [:startup] do
	explain "Resetting JsTestDriver" do
		JsTestDriver::reset
	end
end

##### Helpers

def append(src_filename, dest_file)
	puts "  #{src_filename}"
	dest_file.write(IO.read(src_filename))
end

def explain(headline, &block)
    puts
    puts bright(headline)
    block.call
end

def bright(text)
    return "\033[1m#{text}\033[0m";
end

def run(command)
    puts command
    system command
end

class JsTestDriver
	require 'selenium-webdriver'

    COMMAND = "java -jar #{JSTESTDRIVER_JAR}"

    def self.run_tests
		result = attempt_tests
		raise "Javascript unit tests failed" if $? != 0
	end

    def self.capture_browser
        puts "Launching JsTestDriver browser"
        url = "http://localhost:#{JSTESTDRIVER_PORT}/capture?strict"
        driver = Selenium::WebDriver.for :firefox
        driver.navigate.to url
    end

    def self.launch
        pid = run_in_background("#{COMMAND} --port #{JSTESTDRIVER_PORT}")
        File.open(JSTESTDRIVER_PID_FILE, 'w') do |file|
            puts "echo '#{pid}' > #{JSTESTDRIVER_PID_FILE}"
            file.write(pid)
        end
        wait_for_start
        capture_browser
    end

    def self.terminate
        pid = IO.read(JSTESTDRIVER_PID_FILE);
        puts "Terminating process #{pid}"
        Process.kill('TERM', Integer(pid))
        rm JSTESTDRIVER_PID_FILE
    end

    def self.reset
        run "#{COMMAND} --config #{BUILD_DIR}/JsTestDriver.conf --basePath . --reset 2>&1"
        raise "JsTestDriver failed" if $? != 0
    end

    def self.is_running?
        is_port_open?("localhost", JSTESTDRIVER_PORT)
    end

private

    def self.attempt_tests
        command = "#{COMMAND} --config #{BUILD_DIR}/JsTestDriver.conf --basePath . --tests all 2>&1"
        result = ""
        puts command
        IO.popen(command) do |pipe|
            pipe.sync = true
            while c = pipe.getc
                c = c.chr
                print c
                result += c
            end
        end
        return result
    end

    def self.wait_for_start
        begin
            puts "Waiting for JsTestDriver server to start"
            Timeout::timeout(JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC) do
                until is_running? do
                    sleep 0.2
                end
            end
        rescue Timeout::Error
            puts "JsTestDriver server timed out"
            terminate
            raise "JsTestDriver did not start within #{JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC} seconds"
        end
    end

    def self.run_in_background(command)
        puts "#{command} &"
        pipe = IO.popen(command)
        puts "Process ID: #{pipe.pid}"
        return pipe.pid
    end

    # This function courtesy of 'joast'
    # http://stackoverflow.com/questions/517219/ruby-see-if-a-port-is-open
    def self.is_port_open?(ip, port)
      begin
        Timeout::timeout(1) do
          begin
            s = TCPSocket.new(ip, port)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
      end

      return false
    end

end